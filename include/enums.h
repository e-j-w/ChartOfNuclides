/*
Copyright (C) 2017-2024 J. Williams

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* As the filename says, these are enums used throughout the app */

enum input_type_enum{
INPUT_TYPE_KEYBOARD, INPUT_TYPE_GAMEPAD, INPUT_TYPE_MOUSE,
INPUT_TYPE_ENUM_LENGTH
};
enum input_enum {
INPUT_DOWN, INPUT_UP, INPUT_LEFT, INPUT_RIGHT, //directional inputs
INPUT_ZOOM, INPUT_DOUBLECLICK, INPUT_BACK, INPUT_ENUM_LENGTH
};
enum loc_string_enum{LOCSTR_APPLY,LOCSTR_CANCEL,LOCSTR_OK,LOCSTR_NODB,
LOCSTR_GM_STATE,LOCSTR_ENERGY_KEV,LOCSTR_JPI,LOCSTR_HALFLIFE,
LOCSTR_DECAYMODE,LOCSTR_ENUM_LENGTH
}; //localization srings
enum draw_opt_enum{
DRAWOPT_NONE,
DRAWOPT_HORFLIP,        //horizontal flip
DRAWOPT_VERTFLIP,       //vertical flip
DRAWOPT_HORANDVERTFLIP, //horizontal and vertical flip
DRAWOPT_TOPHALFONLY,    //top half only
DRAWOPT_BOTHALFONLY,    //bottom half only
DRAWOPT_LEFTHALFONLY,   //left half only
DRAWOPT_RIGHTHALFONLY,  //right half only
DRAWOPT_RIGHTALIGN,     //right-aligned, no flip
DRAWOPT_CENTERALIGN,    //center-aligned, no flip
DRAWOPT_ENUM_LENGTH
};
enum alignment_enum{
ALIGN_LEFT,
ALIGN_CENTER,
ALIGN_RIGHT,
ALIGN_ENUM_LENGTH
};
enum highlight_state_enum{
HIGHLIGHT_NORMAL,
HIGHLIGHT_MOUSEOVER,
HIGHLIGHT_SELECTED,
HIGHLIGHT_ENUM_LENGTH
};
enum ui_element_enum{
UIELEM_MSG_BOX_OK_BUTTON,
UIELEM_MSG_BOX, //used to show warnings or errors
UIELEM_MENU_BUTTON,
UIELEM_PRIMARY_MENU,
UIELEM_NUCL_INFOBOX_CLOSEBUTTON,
UIELEM_NUCL_INFOBOX,
UIELEM_ENUM_LENGTH
}; //order in which UI elements are defined here determines 
//order in which they receive input, if they overlap 
//(eariler entries in the enum receive input first)
enum ui_state_enum{
UISTATE_DEFAULT, //no menus open
UISTATE_UNINTERACTABLE,
UISTATE_MSG_BOX,
UISTATE_ENUM_LENGTH
};
enum ui_icon_enum{
UIICON_MENU,
UIICON_SEARCH,
UIICON_CLOSE,
UIICON_ENUM_LENGTH
};
enum ui_animation_enum{
UIANIM_CHART_FADEIN,
UIANIM_MSG_BOX_SHOW,
UIANIM_MSG_BOX_HIDE,
UIANIM_NUCLHIGHLIGHT_SHOW,
UIANIM_NUCLHIGHLIGHT_HIDE,
UIANIM_NUCLINFOBOX_SHOW,
UIANIM_NUCLINFOBOX_HIDE,
UIANIM_ENUM_LENGTH
};
enum value_unit_enum{
VALUE_UNIT_STABLE,
VALUE_UNIT_YEARS,
VALUE_UNIT_DAYS,
VALUE_UNIT_HOURS,
VALUE_UNIT_MINUTES,
VALUE_UNIT_SECONDS,
VALUE_UNIT_MILLISECONDS,
VALUE_UNIT_MICROSECONDS,
VALUE_UNIT_NANOSECONDS,
VALUE_UNIT_PICOSECONDS,
VALUE_UNIT_FEMTOSECONDS,
VALUE_UNIT_ATTOSECONDS,
VALUE_UNIT_EV,
VALUE_UNIT_KEV,
VALUE_UNIT_MEV,
VALUE_UNIT_NOVAL, //no measured value
VALUE_UNIT_PERCENT, //for abundances
VALUE_UNIT_ENUM_LENGTH
};
enum decay_mode_enum{
DECAYMODE_IT,
DECAYMODE_EC,
DECAYMODE_ECANDBETAPLUS,
DECAYMODE_BETAPLUS,
DECAYMODE_BETAPLUS_PROTON,
DECAYMODE_BETAPLUS_TWOPROTON,
DECAYMODE_BETAMINUS,
DECAYMODE_BETAMINUS_NEUTRON,
DECAYMODE_EC_PROTON,
DECAYMODE_ALPHA,
DECAYMODE_BETAMINUS_ALPHA,
DECAYMODE_PROTON,
DECAYMODE_TWOPROTON,
DECAYMODE_NEUTRON,
DECAYMODE_TWONEUTRON,
DECAYMODE_DEUTERON,
DECAYMODE_3HE,
DECAYMODE_SPONTANEOUSFISSION,
DECAYMODE_BETAMINUS_SPONTANEOUSFISSION,
DECAYMODE_2BETAMINUS,
DECAYMODE_2BETAPLUS,
DECAYMODE_2EC,
DECAYMODE_14C,
DECAYMODE_20NE,
DECAYMODE_25NE,
DECAYMODE_28MG,
DECAYMODE_34SI,
DECAYMODE_ENUM_LENGTH
};
enum tentative_enum{
TENTATIVE_NONE,
TENTATIVE_SPINANDPARITY,
TENTATIVE_SPINONLY,
TENTATIVE_NOSPIN,
TENTATIVE_GE,
TENTATIVE_ENUM_LENGTH
};
enum observation_flag_enum{
OBSFLAG_OBSERVED,
OBSFLAG_UNOBSERVED,
OBSFLAG_INFERRED,
OBSFLAG_TENTATIVE,
OBSFLAG_ENUM_LENGTH
};
enum value_type_enum{
VALUETYPE_NUMBER, //should always be the first (default) entry in the enum
VALUETYPE_GREATERTHAN,
VALUETYPE_GREATEROREQUALTHAN,
VALUETYPE_LESSTHAN,
VALUETYPE_LESSOREQUALTHAN,
VALUETYPE_APPROX,
VALUETYPE_UNKNOWN,
VALUETYPE_ENUM_LENGTH
};
enum thread_state_enum{
THREADSTATE_IDLE,
THREADSTATE_KILL,
THREADSTATE_ENUM_LENGTH
};
enum cli_opt_enum{
CLI_NOGAMEPAD,
CLI_ENUM_LENGTH
};
